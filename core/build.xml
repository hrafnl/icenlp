<?xml version="1.0"?>

<project name="IceNLPCore" default="release-jar" basedir=".">
	<description>
		Compiles a release version of the IceNLP toolkit as a single jar file with resource files
	</description>

	<property name="src" location="src" />
	<property name="src-core" location="src/is/iclt/icenlp/core"/>
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="zipname" value="IceNLP" />
	<property name="lib" location="lib" />
	<property name="javadoc" location="javadoc" />
	
	<property name="dict" location="dict" />	
	<property name="segment" location="${lib}/segment-1.3.3.jar" />
	<property name="commons_io" location="${lib}/commons-io-1.4.jar" />
	<property name="commons_logging" location="${lib}/commons-logging-1.1.1.jar" />
	<property name="commons_cli" location="${lib}/commons-cli-1.2.jar" />
	<property name="xerces" location="${lib}/xerces.jar" />
	<property name="junit" location="${lib}/junit-4.8.2.jar" />

	<property name="version" value="1.5.0" />
	<property name="jar_name" value="IceNLPCore" />

	<path id="classpath">
		<pathelement location="${segment}" />
		<pathelement location="${commons_io}" />
		<pathelement location="${commons_logging}" />
	    	<pathelement location="${commons_cli}" />
		<pathelement location="${xerces}" />
		<pathelement location="${junit}" />
	</path>

	<path id="classpath.test">
		<pathelement location="${build}" />
		<pathelement location="${segment}" />
                <pathelement location="${commons_io}" />
                <pathelement location="${commons_logging}" />
                <pathelement location="${commons_cli}" />
                <pathelement location="${xerces}" />
                <pathelement location="${junit}" />
	</path>

	<target name="makerules"
					depends="flex-icetagger, flex-icestagger, flex-iceparser, flex-iceparser-errorsearch, flex-iceNER"
					description="Runs the make rules file"/>
	<target name="flex-icetagger-check">
		<condition property="flex-icetagger.is-uptodate">
			<uptodate>
				<srcfiles dir="." includes="flex/icetagger/genIceRules.flex"/>
				<mapper type="merge"
					to="${src-core}/icetagger/IceLocalRules.java"/>
			</uptodate>
		</condition>
	</target>
	<target name="flex-icetagger" depends="flex-icetagger-check" unless="flex-icetagger.is-uptodate">
		<exec executable="bash" newenvironment="false" dir="flex/icetagger">
			<arg value="compileRules.sh" />
		</exec>
		<echo message="IceTagger rules file created." level="info" />
	</target>
	<target name="flex-icestagger-check">
		<condition property="flex-icestagger.is-uptodate">
			<uptodate>
				<srcfiles dir="." includes="flex/icestagger/*.flex"/>
				<mapper type="glob"
						from="flex/icestagger/*.flex"
						to="${src-core}/icestagger/*.java"/>
			</uptodate>
		</condition>
	</target>
	<target name="flex-icestagger" depends="flex-icestagger-check" unless="flex-icestagger.is-uptodate">
		<exec executable="bash" newenvironment="false" dir="flex/icestagger">
			<arg value="flexAll.sh" />
		</exec>
		<echo message="IceStagger tokenizer files created." level="info" />
	</target>
	<target name="flex-iceparser-check">
		<condition property="flex-iceparser.is-uptodate">
			<uptodate>
				<srcfiles dir="." includes="flex/iceparser/*.flex"/>
				<mapper type="glob"
          from="flex/iceparser/*.flex"
					to="${src-core}/iceparser/*.java"/>
			</uptodate>
		</condition>
	</target>
	<target name="flex-iceparser" depends="flex-iceparser-check" unless="flex-iceparser.is-uptodate">
		<exec executable="bash" newenvironment="false" dir="flex/iceparser">
			<arg value="flexAll.sh" />
		</exec>
		<echo message="IceParser rules file created." level="info" />
	</target>
	<target name="flex-iceparser-errorsearch-check">
		<condition property="flex-iceparser-errorsearch.is-uptodate">
			<uptodate>
				<srcfiles dir="." includes="flex/iceparser/errorSearch/*.flex"/>
				<mapper type="glob"
          from="flex/iceparser/errorSearch/*.flex"
					to="${src-core}/iceparser/*.java"/>
			</uptodate>
		</condition>
	</target>
	<target name="flex-iceparser-errorsearch" depends="flex-iceparser-errorsearch-check" unless="flex-iceparser-errorsearch.is-uptodate">
		<exec executable="bash" newenvironment="false" dir="flex/iceparser/errorSearch">
			<arg value="flexAll.sh" />
		</exec>
		<echo message="IceParser errorSearch rules file created." level="info" />
	</target>
	<target name="flex-iceNER-check">
		<condition property="flex-iceNER.is-uptodate">
			<uptodate>
				<srcfiles dir="." includes="flex/iceNER/NameScanner.flex"/>
				<mapper type="merge"
					to="${src-core}/iceNER/NameScanner.java"/>
			</uptodate>
		</condition>
	</target>
	<target name="flex-iceNER" depends="flex-iceNER-check" unless="flex-iceNER.is-uptodate">
		<exec executable="bash" newenvironment="false" dir="flex/iceNER">
			<arg value="flexit.sh" />
		</exec>
		<echo message="IceNER rules file created." level="info" />
	</target>

	<target name="compile-check" depends="makerules">
		<condition property="compile.is-uptodate">
			<uptodate>
				<srcfiles dir="." includes="src/**/*.java"/>
        <regexpmapper from="src/(.*).java" to="build/\1.class"/>
			</uptodate>
		</condition>
	</target>
	<target name="compile" depends="compile-check" unless="compile.is-uptodate" description="Compiles all the source files">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}">
			<classpath refid="classpath" /> 		
			<!-- <compilerarg value="-Xlint"/> /-->
		</javac>
	</target>

	<target name="junit" depends="compile" unless="release-jar.is-uptodate" description="Runs the JUnit tests">
		<junit fork="true" haltonfailure="yes">
			<classpath refid="classpath.test" />
			<formatter type="brief" usefile="false" />

			<test name="is.iclt.icenlp.core.tests.AllTests" />
		</junit>
	</target>
	
	<target name="release-jar-check" depends="compile">
		<condition property="release-jar.is-uptodate">
			<uptodate>
				<srcfiles dir="." includes="build/**/*.class"/>
				<mapper type="merge"
					to="dist/IceNLPCore.jar"/>
			</uptodate>
		</condition>
	</target>
	<target name="release-jar" depends="release-jar-check, junit" unless="release-jar.is-uptodate" description="Compiles a release version of IceNLP">
	    <mkdir dir="${dist}" />
	    <manifestclasspath property="jar.classpath" jarfile="${dist}/${jar_name}.jar">
	      <classpath refid="classpath"/>
	    </manifestclasspath>  

        
        <exec executable="bash" newenvironment="false" dir="dict/lemmald">
            <arg value="makeRules.sh" /></exec>
        
        
        <jar destfile="${dist}/${jar_name}.jar">			
			<fileset dir="${build}">
				<include name="**/*.class" />
			</fileset>
            <fileset dir="./">
		<include name="dict/icetagger/*.dict" />
		<!-- The following line is needed for not copying  otbBin.dict into the jar file-->
				<exclude name="dict/icetagger/otbBin*.dict"/>
		<include name="dict/tokenizer/*" />
                <include name="dict/tritagger/*.dict" />
            	<include name="dict/formald/segment.srx" />
            	
            	<!-- Lemmald /-->
            	<include name="dict/lemmald/postfixRules.txt" />
            	<include name="dict/lemmald/rule_database_utf8.dat" />
            	<include name="dict/lemmald/settings.txt" />   
		<!-- HMM /--> 
                <include name="ngrams/models/otb.*" />
				<exclude name="ngrams/models/otbBin.*"/>
		        <include name="lists/*" />
            </fileset>
	        <manifest>
	                <attribute name="Built-By" value="${user.name}" />
	                <attribute name="Class-Path" value="${jar.classpath}"/>
	        </manifest>
		</jar>
	</target>

	<target name="docs-check">
		<condition property="docs.is-uptodate">
			<uptodate>
				<srcfiles dir="." includes="doc/*.tex"/>
				<mapper type="glob" from="doc/*.tex" to="doc/*.pdf"/>
			</uptodate>
		</condition>
	</target>
	<target name="docs" depends="docs-check" unless="docs.is-uptodate" description="Build PDFs from TeX-files">
		<exec executable="bash" newenvironment="false" dir="doc">
			<arg value="maketex.sh" />
		</exec>
	</target>


	<target name="zip" depends="release-jar, docs" >
		<zip compress="yes" destfile="${dist}/${zipname}-${version}.zip">
			<zipfileset dir="dist" includes="IceNLPCore.jar" prefix="${zipname}/dist" />
			<zipfileset dir="bat" 	prefix="${zipname}/bat">
				<exclude name="**/icestagger/corpora/bin.lexicon"/>
				<exclude name="**/icestagger/corpora/otb.plain"/>
				<exclude name="**/icestagger/models/otbBIN.bin"/>
			</zipfileset>
			<zipfileset dir="bat" includes="**/*.sh" filemode="755" prefix="${zipname}/bat" />
			<zipfileset dir="dict" prefix="${zipname}/dict" >
				<exclude name="**/otbBin*.dict"/>
				<exclude name="**/BIN/bin*.dict"/>
				<exclude name="**/BIN/bin*.out"/>
				<exclude name="**/BIN/SHsnid.csv"/>
			</zipfileset>
			<zipfileset dir="lib" prefix="${zipname}/lib" />
			<zipfileset dir="ngrams" prefix="${zipname}/ngrams">
				<exclude name="**/models/otbBin*.*"/>
			</zipfileset>
			<zipfileset dir="doc" includes="**/*.pdf" prefix="${zipname}/doc" />
		</zip>
	</target>

	<target name="clean" description="clean up" >
        	<!-- Delete the ${build} and ${dist} directory trees -->
        	<delete dir="${build}"/>
        	<delete dir="${dist}"/>
		<!-- Delete the generated rules files -->
		<delete file="flex/icetagger/genIceRules.class"/>
		<delete file="flex/icetagger/genIceRules.java"/>
		<delete file="${src-core}/icetagger/IceLocalRules.java"/>
		<delete file="${src-core}/icestagger/EnglishTokenizer.java"/>
		<delete file="${src-core}/icestagger/LatinTokenizer.java"/>
		<delete file="${src-core}/iceparser/Case_AP.java"/>
		<delete file="${src-core}/iceparser/Case_NP.java"/>
		<delete file="${src-core}/iceparser/Clean1.java"/>
		<delete file="${src-core}/iceparser/Clean2.java"/>
		<delete file="${src-core}/iceparser/Correction.java"/>
		<delete file="${src-core}/iceparser/ErrDetect.java"/>
		<delete file="${src-core}/iceparser/Func_COMP.java"/>
		<delete file="${src-core}/iceparser/Func_OBJ.java"/>
		<delete file="${src-core}/iceparser/Func_OBJ2.java"/>
		<delete file="${src-core}/iceparser/Func_OBJ3.java"/>
		<delete file="${src-core}/iceparser/Func_QUAL.java"/>
		<delete file="${src-core}/iceparser/Func_SUBJ.java"/>
		<delete file="${src-core}/iceparser/Func_SUBJ2.java"/>
		<delete file="${src-core}/iceparser/Func_TIMEX.java"/>
		<delete file="${src-core}/iceparser/Phrase_AP.java"/>
		<delete file="${src-core}/iceparser/Phrase_APs.java"/>
		<delete file="${src-core}/iceparser/Phrase_AdvP.java"/>
		<delete file="${src-core}/iceparser/Phrase_FOREIGN.java"/>
		<delete file="${src-core}/iceparser/Phrase_MWE.java"/>
		<delete file="${src-core}/iceparser/Phrase_MWEP1.java"/>
		<delete file="${src-core}/iceparser/Phrase_MWEP2.java"/>
		<delete file="${src-core}/iceparser/Phrase_NP.java"/>
		<delete file="${src-core}/iceparser/Phrase_NP2.java"/>
		<delete file="${src-core}/iceparser/Phrase_NPs.java"/>
		<delete file="${src-core}/iceparser/Phrase_PP.java"/>
		<delete file="${src-core}/iceparser/Phrase_Per_Line.java"/>
		<delete file="${src-core}/iceparser/Phrase_VP.java"/>
		<delete file="${src-core}/iceparser/Preprocess.java"/>
		<delete file="${src-core}/iceparser/TagDecoder.java"/>
		<delete file="${src-core}/iceparser/TagEncoder.java"/>
		<delete file="${src-core}/iceparser/NP_errors.java"/>
		<delete file="${src-core}/iceparser/PP_errors.java"/>
		<delete file="${src-core}/iceparser/VP_errors.java"/>
		<delete file="${src-core}/iceNER/NameScanner.java"/>
		<delete file="dict/lemmald/rule_database_utf8.dat"/>
		<delete file="doc/IceNLP.aux"/>
		<delete file="doc/IceNLP.bbl"/>
		<delete file="doc/IceNLP.blg"/>
		<delete file="doc/IceNLP.log"/>
		<delete file="doc/IceNLP.pdf"/>
		<delete file="doc/IceNLP.toc"/>
		<delete file="doc/Tagset.aux"/>
		<delete file="doc/Tagset.bbl"/>
		<delete file="doc/Tagset.blg"/>
		<delete file="doc/Tagset.log"/>
		<delete file="doc/Tagset.pdf"/>
	</target>
	
	
	<!-- ================================================================== -->
	<!-- JAVADOC -->
	<!-- ================================================================== -->
	<target name="javadoc">
		<delete dir="${javadoc}"/>
		<javadoc destdir="${javadoc}" author="true" version="true" use="true" access="public" noqualifier="all" encoding="utf-8" windowtitle="IceNLP Javadoc">

			<classpath>
				<pathelement location="${build}" />
				<fileset dir="${lib}">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<fileset dir="${src}" defaultexcludes="no">
				<include name="**/*.java" />
			</fileset>

			<doctitle>
				<![CDATA[<h1>IceNLP</h1>]]></doctitle>
		<bottom>
			<![CDATA[<i>Copyright &#169; 2009 <a href="http://www.ru.is/faculty/hrafn/" target="_top">Hrafn Loftsson</a>, <a href="http://www3.hi.is/~antoni/" target="_top">Anton Karl Ingason</a>
			</i>]]></bottom>
		<link offline="true" href="http://java.sun.com/products/jdk/1.5/docs/api/" packagelistLoc="/tmp" />
	</javadoc>
	<echo>javadoc output can now be found in javadoc/index.html</echo>
	</target>

	
</project>
