WhiteSpace = [ \t\f]

WordChar = [^\r\n\t\f ]
Word = {WordChar}+
WordSpaces = {WhiteSpace}*{Word}{WhiteSpace}+

Gender = [kvhx]	/* k=masculine, v=feminine, h=neuter, x=unspec */
Number = [ef]	/* e=singular, f=plural */
ObliqueCase = [oþe]		/* o=accusative, þ=dative, e=genitive */
Case = n | {ObliqueCase}	/* n=nominative */
Person = [123]
PhraseCase = [nadg]		/* nom, acc, dat, gen */
Mood = [bfvsþl]		/* b=boðháttur, f=framsöguháttur, v=viðtengingarháttur, s= vegna sagnbótar, þ=lýsingarháttur þátíðar, l=lýsingarháttur nútíðar */
Voice = [gm]		/* g=germynd, m=miðmynd */
Tense = [nþ]
Declension = [osv]	/* o=no declension; s=sterk declension, v=weak declension */
Degree = [fme]		/* f=positive, m=comparative, e=superlative */
ArticleChar = "g"
ProperName = [msö]
Unspec = "-"        /* Unspecified */

// if encode string is altered, it also has to be changed in core/src/is/iclt/icenlp/core/utils/IceParserUtils.java
encodeOpen = "^"
encodeClose =  "$"

AdverbTag = {encodeOpen}aa[me]?{encodeClose}{WhiteSpace}+
Adverb = {WordSpaces}{AdverbTag}
AbbrevTag = {encodeOpen}as{encodeClose}{WhiteSpace}+
Abbreviation = {WordSpaces}{AbbrevTag}

AdjectiveTag = {encodeOpen}l{Gender}{Number}{Case}{Declension}{Degree}{encodeClose}

ConjTag = {encodeOpen}ct?{encodeClose}{WhiteSpace}+
Conj = {WordSpaces}{ConjTag}

InfinitiveTag = {encodeOpen}cn{encodeClose}

PrepTag = {encodeOpen}a{ObliqueCase}[em]?{encodeClose}{WhiteSpace}+
PrepTagAccDat = {encodeOpen}a[oþ][em]?{encodeClose}{WhiteSpace}+
PrepTagGen = {encodeOpen}ae{encodeClose}{WhiteSpace}+
Preposition = {WordSpaces}{PrepTag}
PrepositionAccDat = {WordSpaces}{PrepTagAccDat}
PrepositionGen = {WordSpaces}{PrepTagGen}

VerbTag = {encodeOpen}s{Mood}{Voice}({Person}{Number}{Tense} | {Gender}{Number}{Case})?{encodeClose}
VerbFiniteTag = {encodeOpen}s[bfv]{Voice}{Person}{Number}{Tense}{encodeClose}{WhiteSpace}+
VerbInfinitiveTag = {encodeOpen}sn[mg]{encodeClose}{WhiteSpace}+

// The next definition causes problems because x can be a word!
//NounTag = {encodeOpen}n{Gender}{Number}{Case}{ArticleChar}?{encodeClose}{WhiteSpace}+ | x
NounTag = {encodeOpen}n{Gender}{Number}{Case}{ArticleChar}?{encodeClose}{WhiteSpace}+

ProperNounTag = {encodeOpen}n({Unspec}|{Gender})({Unspec}|{Number})({Unspec}|{Case})({Unspec}|{ArticleChar}){ProperName}{encodeClose}{WhiteSpace}+
NumeralTag = {encodeOpen}t([aop]|f{Gender}{Number}{Case}){encodeClose}{WhiteSpace}+
PersPronounTag = {encodeOpen}fp({Gender}|{Person}){Number}{Case}{encodeClose}{WhiteSpace}+

ErrorCodes = Ng|Nn|Nc|Np|Vn|Vp|Sn|Ss|Sp|Oc|Cg|Cn|Xx|Gh|Pc
//ErrorCodes = [VNASCXGP]([gnpsxh]|"ca")
Error = \?{ErrorCodes}+\?

OpenAdvP = "[AdvP"
CloseAdvP = "AdvP]"
OpenAP = "[AP"
CloseAP = "AP]"
OpenAPs = "[APs"
CloseAPs = "APs]"
//OpenNP = "[NP"\??
//CloseNP = NP\??]
// If a question mark appears in the NP label then the corresponding NP has a potential error
OpenNP = "[NP"{Error}?
//CloseNP = "NP"{Error}?"]"
//OpenNP = "[NP"
CloseNP = "NP]"

OpenNPs = "[NPs"
CloseNPs = "NPs]"
OpenCP = "[CP"
CloseCP = "CP]"
OpenCP = "[CP"
CloseCP = "CP]"
OpenSCP = "[SCP"
CloseSCP = "SCP]"


//OpenVP = "[VP"
//CloseVP = "VP]"

OpenVP = "[VP"{Error}?
CloseVP = "VP]"

OpenVPb = "[VPb"	/* Verb BE phrase    */
CloseVPb = "VPb]"	
OpenVPi = "[VPi"	/* Verb Infinitive phrase */
CloseVPi = "VPi]"
OpenVPs = "[VPs"	/* Verb supine phrase */
CloseVPs = "VPs]"
OpenVPp = "[VPp"	/* Verb past participle phrase */
CloseVPp = "VPp]"
OpenPP = "[PP"
ClosePP = " PP]"	/* Extra space because of conflict with "MWE_PP]" */

Comma = ","{WhiteSpace}+{encodeOpen}(","|"pk"){encodeClose}
//ConjPhrase = {OpenCP}{WhiteSpace}+(og|eða|né|heldur|en)~c{WhiteSpace}+{CloseCP}
ConjPhrase = {OpenCP}~{CloseCP}
ConjPhraseOrComma = {ConjPhrase} | {Comma}
//ConjPhraseSem = {OpenCP}{WhiteSpace}+sem~c{WhiteSpace}+{CloseCP}


/* A multiword expression is marked according to its function   */
/* AdvP=Adverb, AP=Adjective, CP=Conjunction, PP=Preposition 	*/

OpenMWE_PP = "[MWE_PP"
CloseMWE_PP = "MWE_PP]"

MWE_AdvP = "[MWE_AdvP"~"MWE_AdvP]"
MWE_CP = "[MWE_CP"~"MWE_CP]"
MWE_AP = "[MWE_AP"~"MWE_AP]"
MWE_PP= {OpenMWE_PP}~{CloseMWE_PP}

MWE = {MWE_AdvP}|{MWE_CP}|{MWE_AP}|{MWE_PP}

/* NP-phrases in different cases */

NPNom = {OpenNP}n~{CloseNP}
NPAcc = {OpenNP}a~{CloseNP}
NPDat = {OpenNP}d~{CloseNP}
NPGen = {OpenNP}g~{CloseNP}

APNom = {OpenAP}n~{CloseAP}
APAcc = {OpenAP}a~{CloseAP}
APDat = {OpenAP}d~{CloseAP}
APGen = {OpenAP}g~{CloseAP}

StartNPs = {OpenNPs}{WhiteSpace}+{OpenNP}
NPsNom = {StartNPs}n~{CloseNPs}
NPsAcc = {StartNPs}a~{CloseNPs}
NPsDat = {StartNPs}d~{CloseNPs}
NPsGen = {StartNPs}g~{CloseNPs}

StartAPs = {OpenAPs}{WhiteSpace}+{OpenAP}
APsNom = {StartAPs}n~{CloseAPs}
APsAcc = {StartAPs}a~{CloseAPs}
APsDat = {StartAPs}d~{CloseAPs}
APsGen = {StartAPs}g~{CloseAPs}

NPNum = {OpenNP} ~{encodeOpen}t(a|p){encodeClose}{WhiteSpace}+{CloseNP}

